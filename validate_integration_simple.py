#!/usr/bin/env python3
"""
Simple Integration Validation for Persian Legal AI
Tests file structure and configuration without requiring dependencies
"""

import json
import os
from pathlib import Path

def test_file_structure():
    """Test that all required files exist"""
    print("üìÅ Testing File Structure...")
    
    required_files = {
        'backend/services/hardware_detector.py': 'Hardware detection service',
        'backend/ai_classifier.py': 'AI classifier with hardware integration',
        'backend/api/system_endpoints.py': 'System endpoints with hardware detection',
        'vercel.json': 'Vercel configuration',
        'railway.toml': 'Railway configuration',
        'Dockerfile.backend': 'Backend Dockerfile',
        '.env.production': 'Production environment',
        'frontend/next.config.js': 'Frontend configuration'
    }
    
    all_exist = True
    for file_path, description in required_files.items():
        if Path(file_path).exists():
            print(f"‚úÖ {description}: {file_path}")
        else:
            print(f"‚ùå Missing {description}: {file_path}")
            all_exist = False
    
    return all_exist

def test_hardware_detector_code():
    """Test hardware detector code structure"""
    print("\nüîç Testing Hardware Detector Code...")
    
    try:
        with open('backend/services/hardware_detector.py', 'r') as f:
            content = f.read()
        
        required_components = [
            'class HardwareDetector',
            'def select_optimal_model_config',
            'def get_hardware_summary',
            'def _detect_hardware',
            'deployment_environment',
            'gpu_available',
            'ram_gb'
        ]
        
        all_found = True
        for component in required_components:
            if component in content:
                print(f"‚úÖ Found: {component}")
            else:
                print(f"‚ùå Missing: {component}")
                all_found = False
        
        return all_found
        
    except Exception as e:
        print(f"‚ùå Failed to read hardware detector: {e}")
        return False

def test_ai_classifier_integration():
    """Test AI classifier integration code"""
    print("\nüß† Testing AI Classifier Integration...")
    
    try:
        with open('backend/ai_classifier.py', 'r') as f:
            content = f.read()
        
        required_integrations = [
            'from .services.hardware_detector import HardwareDetector',
            'self.hardware_detector = HardwareDetector()',
            'self.model_config = self.hardware_detector.select_optimal_model_config()',
            'def get_system_info',
            'hardware_summary',
            'model_config'
        ]
        
        all_found = True
        for integration in required_integrations:
            if integration in content:
                print(f"‚úÖ Found: {integration}")
            else:
                print(f"‚ùå Missing: {integration}")
                all_found = False
        
        return all_found
        
    except Exception as e:
        print(f"‚ùå Failed to read AI classifier: {e}")
        return False

def test_system_endpoints_integration():
    """Test system endpoints integration"""
    print("\nüåê Testing System Endpoints Integration...")
    
    try:
        with open('backend/api/system_endpoints.py', 'r') as f:
            content = f.read()
        
        required_endpoints = [
            '@router.get("/hardware")',
            '@router.get("/deployment/status")',
            '@router.get("/ai/system-info")',
            'from ..services.hardware_detector import HardwareDetector',
            'detector = HardwareDetector()',
            'select_optimal_model_config'
        ]
        
        all_found = True
        for endpoint in required_endpoints:
            if endpoint in content:
                print(f"‚úÖ Found: {endpoint}")
            else:
                print(f"‚ùå Missing: {endpoint}")
                all_found = False
        
        return all_found
        
    except Exception as e:
        print(f"‚ùå Failed to read system endpoints: {e}")
        return False

def test_vercel_configuration():
    """Test Vercel configuration"""
    print("\nüöÄ Testing Vercel Configuration...")
    
    try:
        with open('vercel.json', 'r') as f:
            config = json.load(f)
        
        required_config = {
            'version': 2,
            'builds': 'list',
            'routes': 'list',
            'env': 'dict'
        }
        
        all_valid = True
        for key, expected_type in required_config.items():
            if key in config:
                if expected_type == 'list' and isinstance(config[key], list):
                    print(f"‚úÖ {key}: Valid list with {len(config[key])} items")
                elif expected_type == 'dict' and isinstance(config[key], dict):
                    print(f"‚úÖ {key}: Valid dict with {len(config[key])} keys")
                elif expected_type != 'list' and expected_type != 'dict':
                    print(f"‚úÖ {key}: {config[key]}")
                else:
                    print(f"‚ùå {key}: Wrong type")
                    all_valid = False
            else:
                print(f"‚ùå Missing: {key}")
                all_valid = False
        
        # Check for API proxy configuration
        routes = config.get('routes', [])
        has_api_proxy = any('/api/' in route.get('src', '') for route in routes)
        if has_api_proxy:
            print("‚úÖ API proxy configuration found")
        else:
            print("‚ùå API proxy configuration missing")
            all_valid = False
        
        return all_valid
        
    except Exception as e:
        print(f"‚ùå Failed to read Vercel configuration: {e}")
        return False

def test_railway_configuration():
    """Test Railway configuration"""
    print("\nüöÇ Testing Railway Configuration...")
    
    try:
        with open('railway.toml', 'r') as f:
            content = f.read()
        
        required_sections = [
            '[build]',
            '[deploy]',
            '[variables]',
            'startCommand',
            'healthcheckPath',
            'MODEL_AUTO_DETECT',
            'ENABLE_HARDWARE_DETECTION'
        ]
        
        all_found = True
        for section in required_sections:
            if section in content:
                print(f"‚úÖ Found: {section}")
            else:
                print(f"‚ùå Missing: {section}")
                all_found = False
        
        return all_found
        
    except Exception as e:
        print(f"‚ùå Failed to read Railway configuration: {e}")
        return False

def test_frontend_configuration():
    """Test frontend configuration"""
    print("\n‚öõÔ∏è Testing Frontend Configuration...")
    
    try:
        with open('frontend/next.config.js', 'r') as f:
            content = f.read()
        
        required_config = [
            'NEXT_PUBLIC_API_URL',
            'persian-legal-ai-backend.railway.app',
            'async rewrites()',
            'Access-Control-Allow-Origin',
            'process.env.VERCEL'
        ]
        
        all_found = True
        for config_item in required_config:
            if config_item in content:
                print(f"‚úÖ Found: {config_item}")
            else:
                print(f"‚ùå Missing: {config_item}")
                all_found = False
        
        return all_found
        
    except Exception as e:
        print(f"‚ùå Failed to read frontend configuration: {e}")
        return False

def test_environment_configuration():
    """Test environment configuration"""
    print("\nüåç Testing Environment Configuration...")
    
    try:
        with open('.env.production', 'r') as f:
            content = f.read()
        
        required_vars = [
            'NODE_ENV=production',
            'NEXT_PUBLIC_API_URL=https://persian-legal-ai-backend.railway.app',
            'MODEL_AUTO_DETECT=true',
            'ENABLE_HARDWARE_DETECTION=true',
            'ENABLE_DYNAMIC_CONFIG=true'
        ]
        
        all_found = True
        for var in required_vars:
            if var in content:
                print(f"‚úÖ Found: {var}")
            else:
                print(f"‚ùå Missing: {var}")
                all_found = False
        
        return all_found
        
    except Exception as e:
        print(f"‚ùå Failed to read environment configuration: {e}")
        return False

def main():
    """Run all validation tests"""
    print("üß™ Persian Legal AI Integration Validation (Simple)")
    print("=" * 60)
    
    tests = [
        ("File Structure", test_file_structure),
        ("Hardware Detector Code", test_hardware_detector_code),
        ("AI Classifier Integration", test_ai_classifier_integration),
        ("System Endpoints Integration", test_system_endpoints_integration),
        ("Vercel Configuration", test_vercel_configuration),
        ("Railway Configuration", test_railway_configuration),
        ("Frontend Configuration", test_frontend_configuration),
        ("Environment Configuration", test_environment_configuration)
    ]
    
    results = {}
    for test_name, test_func in tests:
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå {test_name} failed: {e}")
            results[test_name] = False
    
    # Summary
    print("\n" + "=" * 60)
    print("üìä Integration Test Results:")
    
    passed = sum(results.values())
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{status} {test_name}")
    
    print("\n" + "=" * 60)
    print(f"üìà Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ ALL INTEGRATION TESTS PASSED!")
        print("‚úÖ File structure is correct")
        print("‚úÖ Hardware detection is integrated")
        print("‚úÖ Dynamic model selection is implemented")
        print("‚úÖ System endpoints are extended")
        print("‚úÖ Vercel configuration is valid")
        print("‚úÖ Railway configuration is valid")
        print("‚úÖ Frontend configuration is updated")
        print("‚úÖ Environment configuration is complete")
        print("\nüöÄ System is ready for deployment!")
        return True
    else:
        print(f"‚ùå {total - passed} tests failed")
        print("üîß Please fix the issues before deployment")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)