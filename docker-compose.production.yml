version: '3.8'

services:
  # PostgreSQL Database (production upgrade from SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: persian-legal-postgres
    environment:
      POSTGRES_DB: persian_legal_ai
      POSTGRES_USER: persian_ai_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-persian_ai_secure_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - persian-ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U persian_ai_user -d persian_legal_ai"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: persian-legal-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_persian_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - persian-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_persian_2024}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # FastAPI Backend
  persian-legal-backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.production
      args:
        PYTHON_VERSION: 3.10.12
    container_name: persian-legal-backend
    environment:
      - DATABASE_URL=postgresql://persian_ai_user:${POSTGRES_PASSWORD:-persian_ai_secure_2024}@postgres:5432/persian_legal_ai
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_persian_2024}@redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=https://persian-legal-ai.vercel.app,http://localhost:3000
    volumes:
      - model_storage:/app/models
      - training_logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - persian-ai-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/system/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'

  # React Frontend (production build)
  persian-legal-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        NODE_VERSION: 18.17.0
        VITE_API_URL: ${API_URL:-http://localhost:8000}
    container_name: persian-legal-frontend
    ports:
      - "3000:80"
    networks:
      - persian-ai-network
    depends_on:
      - persian-legal-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: persian-legal-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - persian-ai-network
    depends_on:
      - persian-legal-backend
      - persian-legal-frontend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  model_storage:
    driver: local
  training_logs:
    driver: local

networks:
  persian-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16