# üõ°Ô∏è Enhanced Docker Compose for Persian Legal AI
# Alternative production setup - preserves original docker-compose.yml
# This file provides enhanced deployment with better resource management

version: '3.8'

services:
  # Enhanced Redis Cache with better configuration
  redis-enhanced:
    image: redis:7-alpine
    container_name: persian-legal-redis-enhanced
    command: redis-server --requirepass ${REDIS_PASSWORD:-persian_redis_2024} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_enhanced_data:/data
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    networks:
      - persian-ai-network-enhanced
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-persian_redis_2024}", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Enhanced FastAPI Backend with optimized settings
  backend-enhanced:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: persian-legal-backend-enhanced
    environment:
      - DATABASE_URL=sqlite+aiosqlite:///app/data/persian_legal_ai.db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-persian_redis_2024}@redis-enhanced:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=http://localhost:3001,http://localhost:80
      - MAX_WORKERS=4
      - WORKER_TIMEOUT=120
      - KEEP_ALIVE=2
      - PRELOAD_APP=true
      - GRACEFUL_TIMEOUT=30
      # AI Model optimizations
      - TORCH_THREADS=2
      - OMP_NUM_THREADS=2
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-}
      - TRANSFORMERS_CACHE=/app/models/cache
      - HF_HOME=/app/models/huggingface
    volumes:
      - backend_enhanced_data:/app/data
      - backend_enhanced_models:/app/models
      - backend_enhanced_logs:/app/logs
      - backend_enhanced_cache:/app/cache
    ports:
      - "8001:8000"  # Different port to avoid conflicts
    networks:
      - persian-ai-network-enhanced
    depends_on:
      redis-enhanced:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/system/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s  # Longer startup time for AI models
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 6G  # More memory for AI models
          cpus: '3'
        reservations:
          memory: 3G
          cpus: '1.5'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    # Security enhancements
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Enhanced Next.js Frontend with optimizations
  frontend-enhanced:
    build:
      context: ./persian-legal-ai-frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - NEXT_TELEMETRY_DISABLED=1
    container_name: persian-legal-frontend-enhanced
    environment:
      - NEXT_PUBLIC_API_URL=http://backend-enhanced:8000/api
      - NODE_ENV=production
      - PORT=80
      - HOSTNAME=0.0.0.0
    ports:
      - "3001:80"  # Different port to avoid conflicts
    networks:
      - persian-ai-network-enhanced
    depends_on:
      backend-enhanced:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Security enhancements
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /var/cache/nginx:noexec,nosuid,size=50m

  # Optional: Nginx Load Balancer/Proxy
  nginx-proxy:
    image: nginx:alpine
    container_name: persian-legal-nginx-proxy
    volumes:
      - ./nginx/enhanced.conf:/etc/nginx/nginx.conf:ro
      - nginx_enhanced_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - persian-ai-network-enhanced
    depends_on:
      - frontend-enhanced
      - backend-enhanced
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: persian-legal-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - persian-ai-network-enhanced
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: persian-legal-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - persian-ai-network-enhanced
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    profiles:
      - monitoring

volumes:
  redis_enhanced_data:
    driver: local
  backend_enhanced_data:
    driver: local
  backend_enhanced_models:
    driver: local
  backend_enhanced_logs:
    driver: local
  backend_enhanced_cache:
    driver: local
  nginx_enhanced_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  persian-ai-network-enhanced:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    driver_opts:
      com.docker.network.bridge.name: persian-ai-enhanced
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"

# üîß Usage Instructions:
# 
# 1. Basic deployment (core services only):
#    docker-compose -f docker-compose.enhanced.yml up -d redis-enhanced backend-enhanced frontend-enhanced
#
# 2. With load balancer:
#    docker-compose -f docker-compose.enhanced.yml up -d
#
# 3. With monitoring (requires monitoring profile):
#    docker-compose -f docker-compose.enhanced.yml --profile monitoring up -d
#
# 4. Scale backend for high load:
#    docker-compose -f docker-compose.enhanced.yml up -d --scale backend-enhanced=3
#
# 5. Resource monitoring:
#    docker stats
#
# 6. Health check all services:
#    docker-compose -f docker-compose.enhanced.yml ps
#
# 7. View logs:
#    docker-compose -f docker-compose.enhanced.yml logs -f [service-name]
#
# üõ°Ô∏è Safety Notes:
# - Uses different ports (8001, 3001, 6380) to avoid conflicts with original setup
# - All original functionality preserved
# - Enhanced security with read-only containers and tmpfs
# - Better resource limits to prevent OOM kills
# - Comprehensive logging and monitoring
# - Graceful shutdown handling
# - Health checks for all services

# üåç Environment Variables:
# Create .env.enhanced file with:
# REDIS_PASSWORD=your_secure_redis_password
# GRAFANA_PASSWORD=your_grafana_password
# CUDA_VISIBLE_DEVICES=0  # If using GPU