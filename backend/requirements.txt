# requirements.txt
# وابستگی‌های Python برای سرور Backend

fastapi==0.104.1
uvicorn[standard]==0.24.0
websockets==12.0
pydantic==2.5.0
psutil==5.9.6
python-multipart==0.0.6
jinja2==3.1.2
python-json-logger==2.0.7

# اختیاری - برای عملکرد بهتر
orjson==3.9.10
httptools==0.6.1
uvloop==0.19.0

# برای تولید
gunicorn==21.2.0

---

# docker-compose.yml
# راه‌اندازی با Docker

version: '3.8'

services:
  backend:
    build: .
    ports:
      - "8000:8000"
    environment:
      - ENV=production
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped

---

# Dockerfile
# برای سرور Backend

FROM python:3.11-slim

WORKDIR /app

# نصب وابستگی‌های سیستم
RUN apt-get update && apt-get install -y \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# کپی requirements
COPY requirements.txt .

# نصب وابستگی‌های Python
RUN pip install --no-cache-dir -r requirements.txt

# کپی کد
COPY . .

# ایجاد پوشه logs
RUN mkdir -p logs

# تنظیم port
EXPOSE 8000

# اجرای سرور
CMD ["uvicorn", "backend_server:backend.app", "--host", "0.0.0.0", "--port", "8000"]

---

# Dockerfile.frontend
# برای React Frontend

FROM node:18-alpine

WORKDIR /app

# کپی package files
COPY package*.json ./

# نصب dependencies
RUN npm ci --only=production

# کپی کد
COPY . .

# build
RUN npm run build

# نصب serve
RUN npm install -g serve

# تنظیم port
EXPOSE 3000

# اجرای frontend
CMD ["serve", "-s", "build", "-l", "3000"]

---

# start_complete_system.sh
#!/bin/bash
# اسکریپت راه‌اندازی کامل سیستم

set -e

# رنگ‌ها
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo -e "${PURPLE}⚖️  راه‌اندازی کامل سیستم هوش مصنوعی حقوقی فارسی${NC}"
echo "=============================================================="

# تابع‌های کمکی
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_step() {
    echo -e "${YELLOW}🔧 $1${NC}"
}

# بررسی Python
check_python() {
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version)
        print_success "Python موجود است: $PYTHON_VERSION"
        return 0
    else
        print_error "Python 3 یافت نشد"
        return 1
    fi
}

# بررسی Node.js
check_nodejs() {
    if command -v node &> /dev/null; then
        NODE_VERSION=$(node --version)
        print_success "Node.js موجود است: $NODE_VERSION"
        return 0
    else
        print_error "Node.js یافت نشد"
        return 1
    fi
}

# نصب backend
setup_backend() {
    print_step "راه‌اندازی Backend Server..."
    
    # ایجاد virtual environment
    if [ ! -d "venv" ]; then
        python3 -m venv venv
        print_success "Virtual environment ایجاد شد"
    fi
    
    # فعال‌سازی virtual environment
    source venv/bin/activate
    
    # نصب وابستگی‌ها
    pip install --upgrade pip
    
    if [ -f "requirements.txt" ]; then
        pip install -r requirements.txt
        print_success "وابستگی‌های Backend نصب شدند"
    else
        print_info "نصب وابستگی‌های پایه..."
        pip install fastapi uvicorn[standard] websockets pydantic psutil python-multipart
        
        # ایجاد requirements.txt
        pip freeze > requirements.txt
        print_success "requirements.txt ایجاد شد"
    fi
}

# راه‌اندازی frontend
setup_frontend() {
    print_step "راه‌اندازی Frontend Dashboard..."
    
    if [ -d "persian-legal-ai-dashboard" ]; then
        cd persian-legal-ai-dashboard
        
        # نصب dependencies
        if [ ! -d "node_modules" ]; then
            npm install
            print_success "وابستگی‌های Frontend نصب شدند"
        fi
        
        cd ..
    else
        print_error "پوشه frontend یافت نشد"
        print_info "ابتدا اسکریپت نصب frontend را اجرا کنید"
    fi
}

# اجرای Backend
start_backend() {
    print_step "شروع Backend Server..."
    
    # فعال‌سازی virtual environment
    source venv/bin/activate
    
    # اجرای سرور در پس‌زمینه
    python backend_server.py &
    BACKEND_PID=$!
    
    echo $BACKEND_PID > backend.pid
    print_success "Backend Server شروع شد (PID: $BACKEND_PID)"
    
    # انتظار برای راه‌اندازی
    sleep 3
    
    # بررسی وضعیت
    if curl -s http://localhost:8000/ > /dev/null; then
        print_success "Backend در http://localhost:8000 فعال است"
    else
        print_error "خطا در راه‌اندازی Backend"
        return 1
    fi
}

# اجرای Frontend
start_frontend() {
    print_step "شروع Frontend Dashboard..."
    
    if [ -d "persian-legal-ai-dashboard" ]; then
        cd persian-legal-ai-dashboard
        
        # اجرای در پس‌زمینه
        npm start &
        FRONTEND_PID=$!
        
        echo $FRONTEND_PID > ../frontend.pid
        print_success "Frontend شروع شد (PID: $FRONTEND_PID)"
        
        cd ..
        
        # انتظار برای راه‌اندازی
        sleep 10
        
        print_success "Dashboard در http://localhost:3000 فعال است"
    else
        print_error "پوشه frontend یافت نشد"
        return 1
    fi
}

# توقف سرویس‌ها
stop_services() {
    print_step "توقف سرویس‌ها..."
    
    if [ -f "backend.pid" ]; then
        BACKEND_PID=$(cat backend.pid)
        kill $BACKEND_PID 2>/dev/null || true
        rm backend.pid
        print_success "Backend متوقف شد"
    fi
    
    if [ -f "frontend.pid" ]; then
        FRONTEND_PID=$(cat frontend.pid)
        kill $FRONTEND_PID 2>/dev/null || true
        rm frontend.pid
        print_success "Frontend متوقف شد"
    fi
}

# نمایش وضعیت
show_status() {
    echo ""
    echo -e "${PURPLE}📊 وضعیت سیستم:${NC}"
    echo "------------------------"
    
    # بررسی Backend
    if curl -s http://localhost:8000/ > /dev/null; then
        echo -e "${GREEN}✅ Backend: فعال${NC} - http://localhost:8000"
        echo -e "${BLUE}📚 API Docs:${NC} http://localhost:8000/docs"
    else
        echo -e "${RED}❌ Backend: غیرفعال${NC}"
    fi
    
    # بررسی Frontend
    if curl -s http://localhost:3000/ > /dev/null; then
        echo -e "${GREEN}✅ Frontend: فعال${NC} - http://localhost:3000"
    else
        echo -e "${RED}❌ Frontend: غیرفعال${NC}"
    fi
    
    echo "------------------------"
}

# منوی اصلی
main_menu() {
    while true; do
        echo ""
        echo -e "${PURPLE}انتخاب عملیات:${NC}"
        echo "1. راه‌اندازی کامل سیستم"
        echo "2. شروع فقط Backend"
        echo "3. شروع فقط Frontend"
        echo "4. توقف همه سرویس‌ها"
        echo "5. نمایش وضعیت"
        echo "6. خروج"
        echo ""
        
        read -p "شماره عملیات را وارد کنید: " choice
        
        case $choice in
            1)
                print_info "راه‌اندازی کامل سیستم..."
                setup_backend
                setup_frontend
                start_backend
                start_frontend
                show_status
                
                echo ""
                echo -e "${GREEN}🎉 سیستم کاملاً راه‌اندازی شد!${NC}"
                echo -e "${BLUE}📊 Dashboard:${NC} http://localhost:3000"
                echo -e "${BLUE}📚 API:${NC} http://localhost:8000"
                echo ""
                echo "برای خروج Ctrl+C را فشار دهید"
                ;;
            2)
                setup_backend
                start_backend
                ;;
            3)
                setup_frontend
                start_frontend
                ;;
            4)
                stop_services
                ;;
            5)
                show_status
                ;;
            6)
                stop_services
                print_info "خروج از برنامه"
                exit 0
                ;;
            *)
                print_error "انتخاب نامعتبر"
                ;;
        esac
    done
}

# signal handler برای توقف graceful
cleanup() {
    echo ""
    print_info "دریافت سیگنال توقف..."
    stop_services
    exit 0
}

trap cleanup SIGINT SIGTERM

# شروع اصلی
main() {
    # بررسی پیش‌نیازها
    if ! check_python; then
        print_error "لطفاً Python 3.8+ را نصب کنید"
        exit 1
    fi
    
    if ! check_nodejs; then
        print_error "لطفاً Node.js 16+ را نصب کنید"
        exit 1
    fi
    
    # اجرای منوی اصلی
    main_menu
}

# اجرای تابع اصلی
main "$@"

---

# setup_development.sh
#!/bin/bash
# راه‌اندازی محیط توسعه

echo "🔧 راه‌اندازی محیط توسعه"

# ایجاد ساختار کامل پروژه
mkdir -p {backend,frontend,docs,tests,scripts,configs}

# Backend setup
cd backend
python3 -m venv venv
source venv/bin/activate
pip install fastapi uvicorn[standard] websockets pydantic psutil pytest black isort
pip freeze > requirements.txt

# Frontend setup
cd ../frontend
npx create-react-app . --template typescript
npm install recharts lucide-react tailwindcss

# Development tools
cd ..
echo "node_modules/" > .gitignore
echo "venv/" >> .gitignore
echo "*.pyc" >> .gitignore
echo "__pycache__/" >> .gitignore
echo ".env" >> .gitignore

echo "✅ محیط توسعه آماده شد"

---

# production_deploy.sh
#!/bin/bash
# اسکریپت deployment تولید

echo "🚀 شروع deployment تولید"

# Build frontend
cd frontend
npm run build

# Setup nginx config
sudo tee /etc/nginx/sites-available/persian-ai << 'EOF'
server {
    listen 80;
    server_name your-domain.com;
    
    location / {
        root /var/www/persian-ai/frontend/build;
        try_files $uri $uri/ /index.html;
    }
    
    location /api {
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
    
    location /ws {
        proxy_pass http://localhost:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}
EOF

# Enable site
sudo ln -sf /etc/nginx/sites-available/persian-ai /etc/nginx/sites-enabled/
sudo systemctl reload nginx

# Setup systemd service
sudo tee /etc/systemd/system/persian-ai-backend.service << 'EOF'
[Unit]
Description=Persian AI Backend
After=network.target

[Service]
Type=simple
User=www-data
WorkingDirectory=/var/www/persian-ai/backend
Environment=PATH=/var/www/persian-ai/backend/venv/bin
ExecStart=/var/www/persian-ai/backend/venv/bin/python backend_server.py
Restart=always

[Install]
WantedBy=multi-user.target
EOF

sudo systemctl enable persian-ai-backend
sudo systemctl start persian-ai-backend

echo "✅ Deployment تولید تکمیل شد"